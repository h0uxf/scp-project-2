generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Word {
  wordId      Int          @id @default(autoincrement()) @map("word_id")
  wordText    String       @map("word_text") 
  wordLength  Int          @map("word_length")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  category    String?
  difficulty  String?
  puzzleWords PuzzleWord[]
  wordClues   WordClue[]
}

model Clue {
  clueId      Int          @id @default(autoincrement()) @map("clue_id")
  clueText    String       @map("clue_text")
  clueType    String       @map("clue_type")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  category    String?
  difficulty  String?
  puzzleWords PuzzleWord[]
  wordClues   WordClue[]
}

model WordClue {
  wordId     Int      @map("word_id")
  clueId     Int      @map("clue_id")
  gridNumber Int?     @map("grid_number")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  isActive   Boolean  @default(true) @map("is_active")
  clue       Clue     @relation(fields: [clueId], references: [clueId], onDelete: Cascade)
  word       Word     @relation(fields: [wordId], references: [wordId], onDelete: Cascade)

  @@id([wordId, clueId])
}

model CrosswordPuzzle {
  puzzleId     Int                  @id @default(autoincrement()) @map("puzzle_id")
  title        String
  difficulty   String
  gridSize     Int                  @map("grid_size")
  createdBy    Int?                 @map("created_by")
  isPublished  Boolean              @default(false) @map("is_published")
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  puzzleWords  PuzzleWord[]
  userProgress UserPuzzleProgress[]
}

model PuzzleWord {
  puzzleId   Int             @map("puzzle_id")
  wordId     Int             @map("word_id")
  clueId     Int             @map("clue_id")
  startRow   Int             @map("start_row")
  startCol   Int             @map("start_col")
  direction  String
  clueNumber Int             @map("clue_number")
  clue       Clue            @relation(fields: [clueId], references: [clueId])
  puzzle     CrosswordPuzzle @relation(fields: [puzzleId], references: [puzzleId], onDelete: Cascade)
  word       Word            @relation(fields: [wordId], references: [wordId])

  @@id([puzzleId, wordId, clueId])
}

model UserPuzzleProgress {
  userId      Int             @map("user_id")
  puzzleId    Int             @map("puzzle_id")
  currentGrid String?         @map("current_grid")
  isCompleted Boolean         @default(false) @map("is_completed")
  completedAt DateTime?       @map("completed_at")
  timeSpent   Int?            @map("time_spent")
  hintsUsed   Int             @default(0) @map("hints_used")
  score       Int?
  startedAt   DateTime        @default(now()) @map("started_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  puzzle      CrosswordPuzzle @relation(fields: [puzzleId], references: [puzzleId], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, puzzleId])
}

model Question {
  questionId   Int          @id @default(autoincrement()) @map("question_id")
  questionText String       @map("question_text") @db.VarChar(100)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  order        Int          @default(0)
  options      Option[]     @relation("QuestionOptions")
  quizResults  QuizResult[]
}

model Option {
  optionId      Int              @id @default(autoincrement()) @map("option_id")
  optionText    String           @map("option_text") @db.VarChar(100)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  questionId    Int              @map("question_id")
  personalityId Int?             @map("personality_id")
  order         Int              @default(0)
  personality   PersonalityType? @relation(fields: [personalityId], references: [id])
  question      Question         @relation("QuestionOptions", fields: [questionId], references: [questionId], onDelete: Cascade)
  quizResults   QuizResult[]
}

model QuizResult {
  resultId    Int      @id @default(autoincrement()) @map("result_id")
  questionId  Int      @map("question_id")
  optionId    Int      @map("option_id")
  submittedAt DateTime @default(now()) @map("submitted_at")
  userId      Int      @map("user_id")
  option      Option   @relation(fields: [optionId], references: [optionId], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model PersonalityType {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String       @unique @db.VarChar(50)
  description String
  options     Option[]
  userResults UserResult[]
}

model UserResult {
  id            Int             @id @default(autoincrement())
  userId        Int             @map("user_id")
  personalityId Int             @map("personality_id")
  calculatedAt  DateTime        @default(now()) @map("calculated_at")
  personality   PersonalityType @relation(fields: [personalityId], references: [id])
  user          User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Location {
  locationId    Int            @id @default(autoincrement()) @map("location_id")
  name          String
  description   String
  code          String
  points        Int
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  activity      Activity[]
  userLocations UserLocation[]
}

model Activity {
  activityId     Int              @id @default(autoincrement()) @map("activity_id")
  name           String
  description    String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  locationId     Int?             @map("location_id")
  order          Int              @default(0)
  route          String?
  location       Location?        @relation(fields: [locationId], references: [locationId], onDelete: Cascade)
  rewards        Reward[]
  userActivities UserActivities[]
}

model User {
  userId         Int                  @id @default(autoincrement()) @map("user_id")
  passwordHash   String               @map("password_hash")
  points         Int
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  username       String               @unique
  roleId         Int 
  quizResults    QuizResult[]
  rewards        Reward[]
  userActivities UserActivities[]
  userLocation   UserLocation[]
  puzzleProgress UserPuzzleProgress[]
  userResults    UserResult[]
  role           Role                 @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
}

model UserLocation {
  userId     Int      @map("user_id")
  locationId Int      @map("location_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  location   Location @relation(fields: [locationId], references: [locationId], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, locationId])
}

model UserActivities {
  userId     Int      @map("user_id")
  activityId Int      @map("activity_id")
  points     Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  activity   Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, activityId])
}

model Role {
  roleId         Int              @id @default(autoincrement()) @map("role_id")
  roleName       String           @unique @map("role_name")
  description    String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  rolePermission RolePermission[]
  userRole       User[]
}

model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  assignedAt   DateTime   @default(now()) @map("assigned_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  permission   Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [roleId], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Permission {
  permissionId   Int              @id @default(autoincrement()) @map("permission_id")
  permissionName String           @unique @map("permission_name")
  description    String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  rolePermission RolePermission[]
}

model Reward {
  rewardId   Int       @id @default(autoincrement()) @map("reward_id")
  userId     Int       @map("user_id")
  activityId Int       @map("activity_id")
  isRedeemed Boolean   @default(false) @map("is_redeemed")
  createdAt  DateTime  @default(now()) @map("created_at")
  redeemedAt DateTime? @map("redeemed_at")
  expiresAt  DateTime? @map("expires_at")
  qrToken    String    @unique @map("qr_token") @db.Uuid
  activity   Activity  @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
